(function() {var implementors = {};
implementors["lockdown"] = [{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SentMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrustKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fanout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignedMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PostedMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Invite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedInvite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ManageStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PostMessageResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Content","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HarmonyMethodMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmbedHeading","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmbedField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Embed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attachment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActionPresentation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPresentation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl&lt;ImpErr&gt; !UnwindSafe for E2EEClient&lt;ImpErr&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HarmonyAes","synthetic":true,"types":[]},{"text":"impl&lt;Error&gt; UnwindSafe for E2EEError&lt;Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FanoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MegOlm","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()